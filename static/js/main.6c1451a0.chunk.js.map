{"version":3,"sources":["components/Header.js","components/PillPost.js","App.js","registerServiceWorker.js","index.js"],"names":["style","text","textAlign","Header","props","react_default","a","createElement","className","title","status","currentScore","topScore","IconCard","id","value","onClick","PillClicked","src","image","alt","App","state","result","clicked","Icons","gameOver","console","log","concat","_this","includes","scoreIncrease","push","setState","score","length","resetIconArray","points","newScramble","mixPills","_this2","this","components_Header","map","icon","PillPost","Component","array","counter","index","Math","floor","random","temp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6c1451a0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst style = {\r\n  text: {\r\n    textAlign: \"center\"\r\n  }\r\n}\r\n\r\nconst Header = props => (\r\n  <header style={style.text} className=\"header\">\r\n    <nav className=\"gameBar\">\r\n      <h1 className=\"center\" title=\"Home\">Welcome to Your Daily Pill!!</h1><br />\r\n        <h3> Status: {props.status}<br />\r\n        Score: {props.currentScore} {\" \"}<br />\r\n        Top Score: {props.topScore}</h3>\r\n    </nav>\r\n  </header>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst IconCard = props => (\r\n  <section id={props.id} className=\"iconCard\" value={props.id} onClick={() =>\r\n  props.PillClicked(props.id)\r\n  }>\r\n    <section className=\"pill\">\r\n      <img src={props.image} className=\"db\" alt=\"pill-img\" />\r\n    </section>\r\n  </section>\r\n)\r\n\r\nexport default IconCard;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport PillPost from './components/PillPost';\nimport Icons from './pills.json';\nimport \"./components/PillPost.css\";\n\n\n\n\nclass App extends Component {\n\n\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    Icons,\n    gameOver: false\n  };\n\n  // Below shows how the page is going to be rendered onto the webpage by calling the components.\n  render() {\n      return (\n        <div className='container'>           \n          <Header topScore={this.state.topScore} currentScore={this.state.currentScore} status={this.state.result} />\n        <div className='mainStyle'>\n          {this.state.Icons.map(icon => (\n            <PillPost\n              id={icon.id}\n              image={icon.image}\n              PillClicked={this.PillClicked}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n\n//  If player clicks a img, then increase points, else Gameover. \n  PillClicked = id => {\n    console.log(`Taken: ${id}`);\n    if (!this.state.clicked.includes(id)) {\n      this.scoreIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.gameOver();\n    }\n  }\n\n  // Message fires if user collected all the pills\n  scoreIncrease = () => {\n    let score = this.state.currentScore + 1;\n    console.log(`the score is ${score}`);\n    if (score === this.state.Icons.length) {\n      this.setState({\n        result: \"You Collected All The PillS!!!!!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        Icons,\n        gameOver: false\n      });\n// Message fires when user has a nice top score.\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"Awesome!, You're getting better!!\",\n      });\n\n      // message fires when user is still clicking\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"Nice, A few More To go!!\"\n      });\n    }\n    this.resetIconArray();\n  }\n\n  // This tells the user that He's OD'ed and restarts the game.\n  gameOver = () => {\n    this.setState({\n      points: 0,\n      currentScore: 0,\n      topScore: this.state.topScore,\n      result: \"You OD'ed!!!\",\n      clicked: [],\n      Icons,\n      gameOver: true\n    });\n    console.log('Game over? ', this.state.gameOver);\n    this.resetIconArray();\n  }\n\n  // This shuffles the array into a new one\n  resetIconArray = () => {\n    let newScramble = mixPills(Icons);\n    this.setState({ Icons: newScramble })\n  }\n\n  \n}\n\n// Want to make a functiopn that reshuffles after a certain amount of Time.\n// const pillShuffle = \n\n// This shuffles the img around.\nconst mixPills = (array) => {\n  let counter = array.length;\n  while (counter > 0) {\n    let index = Math.floor(Math.random() * counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n  return array;\n};\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}